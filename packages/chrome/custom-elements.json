{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/index-BWS-dZMK.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "r",
          "type": {
            "text": "object"
          },
          "default": "{}"
        },
        {
          "kind": "function",
          "name": "i",
          "parameters": [
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "n"
        },
        {
          "kind": "function",
          "name": "r",
          "parameters": [
            {
              "name": "n"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "T"
        },
        {
          "kind": "class",
          "description": "",
          "name": "x",
          "members": [
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e",
                  "default": "lt"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$Ei",
              "static": true
            },
            {
              "kind": "method",
              "name": "finalize",
              "static": true
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$Eu",
              "static": true,
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$Ev"
            },
            {
              "kind": "method",
              "name": "addController",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeController",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$E_"
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$EC",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$AK",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "P",
              "parameters": [
                {
                  "name": "t"
                },
                {
                  "name": "e"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$ET"
            },
            {
              "kind": "method",
              "name": "scheduleUpdate"
            },
            {
              "kind": "method",
              "name": "performUpdate"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$AE",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$EU"
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getUpdateComplete"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "t"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_$Ep",
              "default": "void 0"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "default": "!1"
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "default": "!1"
            },
            {
              "kind": "field",
              "name": "_$Em",
              "type": {
                "text": "null"
              },
              "default": "null"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "f"
        },
        {
          "kind": "variable",
          "name": "b",
          "default": "class extends x{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e;const t=super.createRenderRoot();return(e=this.renderOptions).renderBefore??(e.renderBefore=t.firstChild),t}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=Wt(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),(t=this._$Do)==null||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),(t=this._$Do)==null||t.setConnected(!1)}render(){return P}}"
        },
        {
          "kind": "function",
          "name": "m",
          "parameters": [
            {
              "name": "o"
            }
          ]
        },
        {
          "kind": "function",
          "name": "r",
          "parameters": [
            {
              "name": "n"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "D",
          "default": "tt"
        },
        {
          "kind": "variable",
          "name": "$",
          "default": "et"
        },
        {
          "kind": "variable",
          "name": "M",
          "default": "st"
        },
        {
          "kind": "variable",
          "name": "N",
          "default": "it"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wf-error-async",
          "declaration": {
            "name": "D",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-button",
          "declaration": {
            "name": "$",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-view-projects",
          "declaration": {
            "name": "M",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-bm-popup",
          "declaration": {
            "name": "N",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "js",
          "name": "i",
          "declaration": {
            "name": "T",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "js",
          "name": "n",
          "declaration": {
            "name": "m",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "js",
          "name": "r",
          "declaration": {
            "name": "b",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        },
        {
          "kind": "js",
          "name": "x",
          "declaration": {
            "name": "f",
            "module": "dist/assets/index-BWS-dZMK.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/index-DjwgHubo.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "e",
          "default": "s"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wf-view-config",
          "declaration": {
            "name": "e",
            "module": "dist/assets/index-DjwgHubo.js"
          }
        },
        {
          "kind": "js",
          "name": "ViewDefault",
          "declaration": {
            "name": "e",
            "module": "dist/assets/index-DjwgHubo.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/layout/constant.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TAB_PROJECTS",
          "type": {
            "text": "string"
          },
          "default": "'projects'"
        },
        {
          "kind": "variable",
          "name": "TAB_API_CALLS",
          "type": {
            "text": "string"
          },
          "default": "'apiCalls'"
        },
        {
          "kind": "variable",
          "name": "TABS",
          "type": {
            "text": "array"
          },
          "default": "[ TAB_API_CALLS, TAB_PROJECTS, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TAB_PROJECTS",
          "declaration": {
            "name": "TAB_PROJECTS",
            "module": "src/layout/constant.ts"
          }
        },
        {
          "kind": "js",
          "name": "TAB_API_CALLS",
          "declaration": {
            "name": "TAB_API_CALLS",
            "module": "src/layout/constant.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABS",
          "declaration": {
            "name": "TABS",
            "module": "src/layout/constant.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/layout/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BrowserMock",
          "members": [
            {
              "kind": "field",
              "name": "bmIsActive",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "currentView",
              "type": {
                "text": "TCurrentView"
              },
              "default": "TAB_PROJECTS"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[resetStyle, defaultStyle, style]"
            },
            {
              "kind": "method",
              "name": "setInitialState"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "viewsMap",
              "type": {
                "text": "object"
              },
              "default": "{ [TAB_PROJECTS]: async () => { await import(\"../views/projects\"); return html` <wf-view-projects></wf-view-projects>`; }, [TAB_API_CALLS]: async () => { await import(\"../views/apis\"); return html` <wf-view-config></wf-view-config>`; }, }"
            },
            {
              "kind": "field",
              "name": "viewLoadTask",
              "default": "new Task(this, { task: async ([currentView]) => this.viewsMap[currentView](), args: () => [this.currentView], })"
            },
            {
              "kind": "field",
              "name": "renderTabLink"
            },
            {
              "kind": "field",
              "name": "renderButtons"
            },
            {
              "kind": "field",
              "name": "handleToggleBm"
            },
            {
              "kind": "field",
              "name": "handleToast"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-bm-popup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BrowserMock",
          "declaration": {
            "name": "BrowserMock",
            "module": "src/layout/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-bm-popup",
          "declaration": {
            "name": "BrowserMock",
            "module": "src/layout/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/layout/interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/layout/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { display: block; background-color: var(--main-bg); } nav { display: flex; flex-wrap: wrap; background-color: var(--primary); font-size: var(--font-size-l); font-weight: bold; a { position: relative; padding: 16px 24px 14px; color: var(--font-color-iverse); background-color: var(--primary); transition: background-color 400ms ease-in-out; &:after { content: ''; display: block; width: 0; height: 4px; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); opacity: 0; background-color: var(--font-color-iverse); transition: all 400ms ease-in-out; } &.active { background-color: var(--primary-bright); } &:hover { &:after { opacity: 1; width: 100%; } } } wf-switch { padding: 10px 16px 0 0; margin-left: auto; } } .tabs { padding: 16px 8px; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/layout/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/sw/background.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/component/button/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "TAppearance"
              },
              "default": "'primary'"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "TType"
              },
              "default": "'button'"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "TSize"
              },
              "default": "'m'"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "default": "'_self'"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "renderButton",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "renderLink",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleClick"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/button/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-button",
          "declaration": {
            "name": "Component",
            "module": "src/component/button/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/button/interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/component/button/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { display: inline-flex; align-items: center; justify-content: center; } :host(:focus-visible) { outline: 0; } :host([disabled]) { .cta { opacity: .6; cursor: not-allowed; pointer-events: none; } } .cta { border: 2px solid transparent; cursor: pointer; border-radius: 999em; transition: all 300ms ease-in-out; background-color: transparent; } .xs { padding: 2px 8px; font-size: var(--font-size-s); } .s { padding: 4px 12px; font-size: var(--font-size-s); } .m { padding: 8px 16px; } .l { padding: 12px 24px; font-size: var(--font-size-l); } .xl { padding: 16px 36px; font-size: var(--font-size-l); } .inherit { padding: inherit; font-size: inherit; width: inherit; height: inherit; border-radius: inherit; } .primary, .secondary, .tertiary { color: #fff; } .none { background-color: rgba(0,0,0, 0); border-color: rgba(0,0,0, 0); &:hover, &:focus, &:focus-visible { background-color: var(--primary-inverse); } } .primary { background-color: var(--primary); border-color: var(--primary); &:hover, &:focus, &:focus-visible { background-color: var(--primary-dark); border-color: var(--primary-dark); } } .secondary { background-color: var(--secondary); border-color: var(--secondary); &:hover, &:focus, &:focus-visible { background-color: var(--secondary-dark); border-color: var(--secondary-dark); } } .tertiary { background-color: var(--tertiary); border-color: var(--tertiary); &:hover, &:focus, &:focus-visible { background-color: var(--tertiary-dark); border-color: var(--tertiary-dark); } } .primary-outline { border-color: var(--primary); color: var(--primary); &:hover, &:focus, &:focus-visible { background-color: var(--primary-inverse); } } .secondary-outline { border-color: var(--secondary); color: var(--secondary); &:hover, &:focus, &:focus-visible { background-color: var(--secondary-inverse); } } .tertiary-outline { border-color: var(--tertiary); color: var(--tertiary); &:hover, &:focus, &:focus-visible { background-color: var(--tertiary-inverse); } } .primary-clean { color: var(--primary); &:hover, &:focus, &:focus-visible { color: var(--primary-dark); } } .secondary-clean { color: var(--secondary); &:hover, &:focus, &:focus-visible { color: var(--secondary-dark); } } .tertiary-clean { color: var(--tertiary); &:hover, &:focus, &:focus-visible { color: var(--tertiary-dark); } } `"
        },
        {
          "kind": "variable",
          "name": "buttonsWrapperStyles",
          "default": "css` .buttons { display: flex; gap: 16px; &.right { justify-content: right; } &.center { justify-content: center; } } wf-button { margin: 0 !important; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/button/style.ts"
          }
        },
        {
          "kind": "js",
          "name": "buttonsWrapperStyles",
          "declaration": {
            "name": "buttonsWrapperStyles",
            "module": "src/component/button/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/collapse/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "isOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "onToggle",
              "type": {
                "text": "(checked: typeof this.isOpen, id?) => void"
              }
            },
            {
              "kind": "field",
              "name": "cnt",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "wrp",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleChange"
            },
            {
              "kind": "field",
              "name": "handleWindowResize"
            },
            {
              "kind": "field",
              "name": "getMaxHeight"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/collapse/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-collapse",
          "declaration": {
            "name": "Component",
            "module": "src/component/collapse/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/collapse/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { position: relative; } input { position: absolute; opacity: 0; appearance: none; margin: 0; &:focus-visible, &:focus { outline: none; + label { border-color: var(--secondary); } } &:checked + label { &:after { width: 100%; opacity: 1; } svg { transform: translateY(-50%) rotate(-90deg); } } } label { display: block; width: 100%; font-size: var(--font-size-l); padding: 20px 0 16px; padding-inline: 16px 40px; cursor: pointer; position: relative; border: 1px solid var(--grey-5); border-radius: 8px 8px 0 0; &:after { content: ''; display: block; width: 0; height: 1px; //background-color: var(--grey-5); position: absolute; top: 100%; left: 50%; opacity: 0; transform: translateX(-50%); transition: width 600ms ease-in-out, opacity 200ms ease-in; } } svg { width: 36px; height: 36px; fill: var(--grey-7); position: absolute; right: 12px; top: 50%; transition: transform 260ms ease-in-out; transform: translateY(-50%) rotate(90deg); filter: drop-shadow(1px 2px 2px rgba(0, 0, 0, .2 )); } #cnt { max-height: 0; overflow: hidden; transition: max-height ease-in-out 600ms; border: 1px solid var(--grey-5); border-top: 0; border-radius: 0 0 8px 8px; } #wrp { padding: var(--collapse-padding); } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/collapse/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/file/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "'.json'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "File[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "inputElement",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "FormFieldController<Component>"
              },
              "default": "new FormFieldController(this)"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, formStyle, formHintStyle, formErrorStyle, labelStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "renderFileListItems"
            },
            {
              "kind": "field",
              "name": "handleInput"
            },
            {
              "kind": "field",
              "name": "handleBtnClick"
            },
            {
              "kind": "field",
              "name": "handleItemClick"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/file/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-file",
          "declaration": {
            "name": "Component",
            "module": "src/component/file/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/file/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { position: relative; } input { position: absolute; overflow: hidden; padding: 0; border: 0; margin: -1px; block-size: 1px; clip: rect(0px, 0px, 0px, 0px); inline-size: 1px; visibility: inherit; white-space: nowrap; } .input { font-family: var(--font-family), sans-serif; color: var(--font-color); border-radius: var(--border-radius); border: 1px solid var(--grey-5); padding-top: 20px; padding-bottom: 4px; padding-inline: 16px 60px; min-height: 54px; width: 100%; max-width: 100%; font-size: var(--font-size-l); outline: none; } li { padding: 4px 0; cursor: pointer; display: flex; gap: 8px; align-items: center; svg { width: 16px; height: 16px; fill: var(--secondary); } } wf-button { position: absolute; top: 1px; right: 1px; height: 52px; width: 52px; border-radius: 0 var(--border-radius) var(--border-radius) 0; svg { width: 24px; height: 24px; fill: var(--primary); } &:focus-visible, &:focus { + .input { border-color: var(--secondary); border-width: 2px; } } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/file/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/input/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "FormFieldController<Component>"
              },
              "default": "new FormFieldController(this)"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, formStyle, formHintStyle, formErrorStyle, labelStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/input/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-input",
          "declaration": {
            "name": "Component",
            "module": "src/component/input/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/input/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/input/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/option-picker/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "onChange",
              "type": {
                "text": "(value: typeof this.value) => void"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, style]"
            },
            {
              "kind": "field",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "renderOption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLInputElement"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/option-picker/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-option-picker",
          "declaration": {
            "name": "Component",
            "module": "src/component/option-picker/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/option-picker/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { display: flex; gap: 16px 32px; flex-wrap: nowrap; } input { opacity: 0; appearance: none; margin: 0; &:focus-visible { outline: none; } } h5 { font-weight: bold; font-size: var(--font-size-l); } label { position: relative; cursor: pointer; display: inline-flex; align-items: center; top: unset; transform: unset; inset-inline-start: unset; border-radius: var(--border-radius); border: 1px solid; padding: 8px 0 8px 16px; background-color: var(--main-bg); transition: color 200ms ease-out, background-color 200ms ease-out; span { position: relative; display: inline-block; width: 0; padding-left: 16px; overflow: hidden; transition: opacity 200ms ease-out, width 360ms ease-out; } } svg { width: 24px; filter: drop-shadow(1px 2px 2px rgba(0, 0, 0, .2 )); fill: var(--font-color-iverse); } input:checked + label { color: var(--font-color-iverse); span { opacity: 1; width: 56px; } } .success { label { border-color: var(--success); color: var(--success); } input:checked + label { background-color: var(--success-bg); } } .error { label { border-color: var(--error); color: var(--error); } input:checked + label { background-color: var(--error-bg); } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/option-picker/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/options/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'radio' | 'checkbox'"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, formHintStyle, formErrorStyle, labelStyle, style]"
            },
            {
              "kind": "field",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "renderFields"
            },
            {
              "kind": "method",
              "name": "renderOption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLInputElement"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "changeHandlerMap",
              "type": {
                "text": "{[key: typeof this.type]: (value: string) => void}"
              },
              "default": "{ radio: (value) => { if(value !== this.value) { this.value = value; } }, checkbox: (value) => { const index = this.value.indexOf(value); if(index === -1) { (this.value as string[]).push(value); } else { (this.value as string[]).splice(index, 1); } } }"
            },
            {
              "kind": "field",
              "name": "handleChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/options/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-options",
          "declaration": {
            "name": "Component",
            "module": "src/component/options/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/options/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` label { position: unset; display: block; top: unset; transform: unset; inset-inline-start: unset; margin-bottom: 16px; } .options { display: flex; gap: 16px 32px; flex-wrap: nowrap; label { cursor: pointer; display: inline-flex; align-items: center; overflow: visible; margin-bottom: 0; span { position: relative; display: inline-block; width: 20px; height: 20px; border-radius: 50%; margin-right: 8px; border: 1px solid var(--grey-5); transition: opacity 200ms ease-out; margin-top: -2px; &:before { content: ''; display: inline-block; width: 12px; height: 12px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); border-radius: 50%; opacity: .2; background-color: var(--grey-5); transition: opacity 200ms ease-out; } } } } input { opacity: 0; appearance: none; margin: 0; &:focus-visible { outline: none; + label span { box-shadow: 0 0 1px 2px var(--secondary); } } } input[type=\"checkbox\"] + label span { border-radius: 6px; &:before { border-radius: 4px; } } input:checked + label span { border-color: var(--primary) !important; border-width: 2px; &:before { opacity: 1; background-color: var(--primary); } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/options/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/progress/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[style]"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/progress/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-progress",
          "declaration": {
            "name": "Component",
            "module": "src/component/progress/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/progress/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { display: none; } :host([visible]) { display: block; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 60px; aspect-ratio: 1; &:before, &:after { content: \"\"; position: absolute; border-radius: 99em; animation: progressAni 2.5s infinite; background: var(--grey-1); border: 4px solid; box-shadow: var(--box-shadow); } &:before { border-color: var(--primary); } &:after { border-color: var(--secondary); animation-delay: -1.25s; } } @keyframes progressAni { 0% { inset: 0 34px 34px 0; } 12.5% { inset: 0 34px 0 0; } 25% { inset: 34px 34px 0 0; } 37.5% { inset: 34px 0 0 0; } 50% { inset: 34px 0 0 34px; } 62.5% { inset: 0 0 0 34px; } 75% { inset: 0 0 34px 34px; } 87.5% { inset: 0 0 34px 0; } 100% { inset: 0 34px 34px 0; } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/progress/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/select/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, formHintStyle, formErrorStyle, formStyle, labelStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "renderSelectOptions"
            },
            {
              "kind": "field",
              "name": "handleChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/select/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-select",
          "declaration": {
            "name": "Component",
            "module": "src/component/select/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/select/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` select { appearance: none; cursor: pointer; overflow: hidden; text-overflow: ellipsis; } .hide { color: transparent; } svg { position: absolute; top: 50%; right: 16px; transform: translateY(-50%); fill: var(--grey-7); } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/select/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/switch/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, formHintStyle, formErrorStyle, labelStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "handleChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/switch/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-switch",
          "declaration": {
            "name": "Component",
            "module": "src/component/switch/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/switch/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` input { position: absolute; opacity: 0; appearance: none; margin: 0; &:focus-visible { outline: none; + label { box-shadow: 0 0 1px 2px var(--secondary); } } &:checked + label span { &:before { background: var(--primary); } &:after { background: var(--primary); left: 25px; } } } label { position: relative; cursor: pointer; display: flex; align-items: center; top: unset; transform: unset; inset-inline-start: unset; overflow: visible; } span { position: relative; display: inline-block; padding: 8px 4px; margin-right: 8px; &:before, &:after { content: ''; display: block; transition: all 300ms ease-out; } &:before { width: 40px; height: 12px; border-radius: 999em; background: var(--grey-7); opacity: .4; } &:after { position: absolute; top: 50%; transform: translateY(-50%); left: 0; width: 24px; height: 24px; border-radius: 50%; background: var(--grey-7); box-shadow: var(--box-shadow); } } :host([inverse]) { input { &:checked + label span { &:before { background: var(--primary-inverse); } &:after { background: var(--primary-inverse); } } } span { &:before { background: var(--grey-3); } &:after { background: var(--grey-5); } } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/switch/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/textarea/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "FormFieldController<Component>"
              },
              "default": "new FormFieldController(this)"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, formHintStyle, formErrorStyle, formStyle, labelStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/textarea/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-textarea",
          "declaration": {
            "name": "Component",
            "module": "src/component/textarea/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/textarea/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` textarea { height: 162px; min-width: 100%; padding-top: 28px; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/textarea/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/constant.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "inputFieldTypes",
          "type": {
            "text": "array"
          },
          "default": "[ 'wf-input', 'wf-switch', 'wf-select', 'wf-textarea', 'wf-options', 'wf-file', ]"
        },
        {
          "kind": "variable",
          "name": "inputFieldTypesChangeOnly",
          "type": {
            "text": "array"
          },
          "default": "[ 'wf-switch', 'wf-textarea', 'wf-options', ]"
        },
        {
          "kind": "variable",
          "name": "errorMessages",
          "type": {
            "text": "object"
          },
          "default": "{ required: 'This field is required', minLength: 'This field must be at least {min-length} characters long', maxLength: 'This field must be at most {max-length} characters long', min: 'This field must be at least {min}', max: 'This field must be at most {max}', regex: 'This field does not match the required pattern', secure: 'This field is not valid', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "inputFieldTypes",
          "declaration": {
            "name": "inputFieldTypes",
            "module": "src/util/formController/constant.ts"
          }
        },
        {
          "kind": "js",
          "name": "inputFieldTypesChangeOnly",
          "declaration": {
            "name": "inputFieldTypesChangeOnly",
            "module": "src/util/formController/constant.ts"
          }
        },
        {
          "kind": "js",
          "name": "errorMessages",
          "declaration": {
            "name": "errorMessages",
            "module": "src/util/formController/constant.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "T"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "checks",
              "type": {
                "text": "IChecks<N>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "Partial<N>"
              }
            },
            {
              "kind": "field",
              "name": "invalidFields",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_isValide",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "!this.invalidFields.length"
            },
            {
              "kind": "field",
              "name": "validateFormField"
            },
            {
              "kind": "field",
              "name": "handleInput",
              "type": {
                "text": "EventListener"
              }
            },
            {
              "kind": "field",
              "name": "handleChange",
              "type": {
                "text": "EventListener"
              }
            },
            {
              "kind": "field",
              "name": "handleBlur",
              "type": {
                "text": "EventListener"
              }
            },
            {
              "kind": "field",
              "name": "addEventListeners"
            },
            {
              "kind": "field",
              "name": "removeEventListeners"
            },
            {
              "kind": "field",
              "name": "toggleEventListeners"
            },
            {
              "kind": "field",
              "name": "setInitialChecks"
            },
            {
              "kind": "field",
              "name": "defaultCheckMap",
              "type": {
                "text": "object"
              },
              "default": "{ required: required, min: min, max: max, minLength: minLength, maxLength: maxLength, }"
            },
            {
              "kind": "field",
              "name": "addCheckToArray"
            },
            {
              "kind": "field",
              "name": "getDefaultValidationAttributes"
            },
            {
              "kind": "field",
              "name": "isValide"
            },
            {
              "kind": "field",
              "name": "validate"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "field",
              "default": "(this.checks = checks)"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormController",
          "declaration": {
            "name": "FormController",
            "module": "src/util/formController/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formField/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormFieldController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "T"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "handleInput"
            },
            {
              "kind": "field",
              "name": "handleUpdate"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormFieldController",
          "declaration": {
            "name": "FormFieldController",
            "module": "src/util/formField/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/nodeListHelper/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "filter",
          "parameters": [
            {
              "name": "list",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node | Element, index?: number) => boolean"
              }
            },
            {
              "name": "args",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "find",
          "parameters": [
            {
              "name": "list",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node | Element, index?: number) => boolean"
              }
            },
            {
              "name": "args",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "forEach",
          "parameters": [
            {
              "name": "list",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node | Element, index?: number) => void"
              }
            },
            {
              "name": "args",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "map",
          "parameters": [
            {
              "name": "list",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node | Element, index?: number) => any"
              }
            },
            {
              "name": "args",
              "type": {
                "text": "any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "filter",
          "declaration": {
            "name": "filter",
            "module": "src/util/nodeListHelper/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "find",
          "declaration": {
            "name": "find",
            "module": "src/util/nodeListHelper/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "forEach",
          "declaration": {
            "name": "forEach",
            "module": "src/util/nodeListHelper/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "map",
          "declaration": {
            "name": "map",
            "module": "src/util/nodeListHelper/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/render/renderAsterisks.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "renderAsterisks",
          "parameters": [
            {
              "name": "required",
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderAsterisks",
          "declaration": {
            "name": "renderAsterisks",
            "module": "src/util/render/renderAsterisks.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/render/renderFormErrorMsg.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "renderFormErrorMsg",
          "parameters": [
            {
              "name": "msg",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderFormErrorMsg",
          "declaration": {
            "name": "renderFormErrorMsg",
            "module": "src/util/render/renderFormErrorMsg.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/render/renderFormInputHint.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "renderFormInputHint",
          "parameters": [
            {
              "name": "msg",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderFormInputHint",
          "declaration": {
            "name": "renderFormInputHint",
            "module": "src/util/render/renderFormInputHint.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/string/capitalizeFirstLetter.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "capitalizeFirstLetter",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "capitalizeFirstLetter",
          "declaration": {
            "name": "capitalizeFirstLetter",
            "module": "src/util/string/capitalizeFirstLetter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/style/defaultStyle.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultStyle",
          "default": "css` :host { display: block; font-family: var(--font-family), sans-serif; font-size: var(--font-size); color: var(--font-color); } :host, *, *:before, *:after { box-sizing: border-box; } a { text-decoration: none; } div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } ul, ol, li { padding: 0; margin: 0; list-style: none; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultStyle",
          "declaration": {
            "name": "defaultStyle",
            "module": "src/util/style/defaultStyle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/style/formStyle.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "formStyle",
          "default": "css` :host { position: relative; } textarea, select, input { font-family: var(--font-family), sans-serif; color: var(--font-color); border-radius: var(--border-radius); border: 1px solid var(--grey-5); padding-top: 20px; padding-bottom: 4px; padding-inline: 16px 40px; height: 54px; width: 100%; max-width: 100%; font-size: var(--font-size-l); outline: none; &:focus-visible, &:focus { border-color: var(--secondary); border-width: 2px; } } textarea, input { &:focus-visible, &:focus { + label { font-size: var(--font-size-s); top: 8px; } } } `"
        },
        {
          "kind": "variable",
          "name": "labelStyle",
          "default": "css` label { position: absolute; top: 20px; font-size: var(--font-size-l); inset-inline-start: 16px; max-width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; transition: all 240ms ease-out; color: var(--grey-7); } label.active { font-size: var(--font-size-s); top: 8px; } :host([inverse]) { label { color: var(--font-color-iverse); } } .asterisks { color: var(--grey-3); } `"
        },
        {
          "kind": "variable",
          "name": "formHintStyle",
          "default": "css` .hint { display: block; padding: 4px 0 0 8px; font-size: var(--font-size-s); color: var(--grey-3); } `"
        },
        {
          "kind": "variable",
          "name": "formErrorStyle",
          "default": "css` .err { display: block; padding: 4px 0 0 8px; color: var(--error); } :host([error]) { label { color: var(--error); } textarea, select, input { border-color: var(--error); } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "formStyle",
          "declaration": {
            "name": "formStyle",
            "module": "src/util/style/formStyle.ts"
          }
        },
        {
          "kind": "js",
          "name": "labelStyle",
          "declaration": {
            "name": "labelStyle",
            "module": "src/util/style/formStyle.ts"
          }
        },
        {
          "kind": "js",
          "name": "formHintStyle",
          "declaration": {
            "name": "formHintStyle",
            "module": "src/util/style/formStyle.ts"
          }
        },
        {
          "kind": "js",
          "name": "formErrorStyle",
          "declaration": {
            "name": "formErrorStyle",
            "module": "src/util/style/formStyle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/style/resetStyle.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "resetStyle",
          "default": "css` div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } ul, ol, li { padding: 0; margin: 0; list-style: none; } a { text-decoration: none; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "resetStyle",
          "declaration": {
            "name": "resetStyle",
            "module": "src/util/style/resetStyle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/style/textStyle.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "textStyle",
          "default": "css` h1, h2, h4, h6 { font-weight: bold; } h5, h4 { font-size: var(--font-size-l); } h3, h2 { font-size: 22px; } h1 { font-size: 28px; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textStyle",
          "declaration": {
            "name": "textStyle",
            "module": "src/util/style/textStyle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/windowEventHandler/index.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/util/windowEventHandler/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "windowEventHandler",
          "parameters": [
            {
              "name": "eventName",
              "type": {
                "text": "TEventName"
              }
            },
            {
              "name": "timeoutMs",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "resizeHandler"
        },
        {
          "kind": "variable",
          "name": "scrollHandler"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "windowEventHandler",
          "declaration": {
            "name": "windowEventHandler",
            "module": "src/util/windowEventHandler/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "resizeHandler",
          "declaration": {
            "name": "resizeHandler",
            "module": "src/util/windowEventHandler/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "scrollHandler",
          "declaration": {
            "name": "scrollHandler",
            "module": "src/util/windowEventHandler/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/apis/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ViewDefault",
          "members": [
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "collapses",
              "type": {
                "text": "NodeListOf<CollapseComponent>"
              }
            },
            {
              "kind": "field",
              "name": "inputFields",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "FormController<IFormValues, ViewDefault>"
              },
              "default": "new FormController(this, { text: [required, minLength], })"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, buttonsWrapperStyles, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "addNewProject"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-view-config",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ViewDefault",
          "declaration": {
            "name": "ViewDefault",
            "module": "src/views/apis/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-view-config",
          "declaration": {
            "name": "ViewDefault",
            "module": "src/views/apis/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/apis/interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/views/apis/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host * { margin-bottom: 16px; } ep-collapse { margin-bottom: 8px; } :host *, ep-collapse { &:last-child { margin-bottom: 0; } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/views/apis/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/error/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ErrorAsync",
          "members": [
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "css` :host { display: block; } `"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-error",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ErrorAsync",
          "declaration": {
            "name": "ErrorAsync",
            "module": "src/views/error/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-error",
          "declaration": {
            "name": "ErrorAsync",
            "module": "src/views/error/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/projects/constant.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "VIEW_LIST",
          "type": {
            "text": "string"
          },
          "default": "'list'"
        },
        {
          "kind": "variable",
          "name": "VIEW_NEW",
          "type": {
            "text": "string"
          },
          "default": "'new'"
        },
        {
          "kind": "variable",
          "name": "VIEW_EDIT",
          "type": {
            "text": "string"
          },
          "default": "'edit'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VIEW_LIST",
          "declaration": {
            "name": "VIEW_LIST",
            "module": "src/views/projects/constant.ts"
          }
        },
        {
          "kind": "js",
          "name": "VIEW_NEW",
          "declaration": {
            "name": "VIEW_NEW",
            "module": "src/views/projects/constant.ts"
          }
        },
        {
          "kind": "js",
          "name": "VIEW_EDIT",
          "declaration": {
            "name": "VIEW_EDIT",
            "module": "src/views/projects/constant.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/projects/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "collapses",
              "type": {
                "text": "NodeListOf<CollapseComponent>"
              }
            },
            {
              "kind": "field",
              "name": "view",
              "type": {
                "text": "typeof VIEW_NEW | typeof VIEW_EDIT | typeof VIEW_LIST"
              },
              "default": "VIEW_LIST"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, textStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "renderProjectList"
            },
            {
              "kind": "field",
              "name": "editProject"
            },
            {
              "kind": "field",
              "name": "handleFormSubmit"
            },
            {
              "kind": "field",
              "name": "handleDeleteProject"
            },
            {
              "kind": "field",
              "name": "addNewProject"
            },
            {
              "kind": "field",
              "name": "views",
              "type": {
                "text": "object"
              },
              "default": "{ [VIEW_NEW]: () => html`<wf-project-form @onSubmit=\"${this.handleFormSubmit}\"></wf-project-form>`, [VIEW_EDIT]: () => html`<wf-project-form @onSubmit=\"${this.handleFormSubmit}\" @onDelete=\"${this.handleDeleteProject}\" canDelete></wf-project-form>`, [VIEW_LIST]: this.renderProjectList, }"
            },
            {
              "kind": "field",
              "name": "setView"
            },
            {
              "kind": "field",
              "name": "renderView"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Component",
          "declaration": {
            "name": "Component",
            "module": "src/views/projects/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-view-projects",
          "declaration": {
            "name": "Component",
            "module": "src/views/projects/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/projects/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/views/projects/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/toast/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "toastHandler"
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "TNotificationTypes"
              },
              "default": "'success'"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "renderIcon"
            },
            {
              "kind": "field",
              "name": "handleCloseClick"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Component",
            "module": "src/component/toast/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-toast",
          "declaration": {
            "name": "Component",
            "module": "src/component/toast/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/toast/interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/component/toast/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host { padding: 16px; display: grid; grid-template-columns: 40px auto 40px; align-items: center; max-width: 300px; border-left: 4px solid var(--grey-5); background-color: var(--grey-0); box-shadow: var(--box-shadow); margin-bottom: 12px; transition: margin-left 400ms ease-out; &:last-child { margin-bottom: 0; } } svg { fill: var(--grey-5); width: 24px; filter: drop-shadow(1px 2px 2px rgba(0, 0, 0, .2 )); } :host([appearance=\"success\"]) { background-color: var(--success-bg); border-color: var(--success); color: var(--grey-0); svg { fill: var(--grey-0); } > svg { fill: var(--success); } } :host([appearance=\"error\"]) { background-color: var(--error-bg); border-color: var(--error); color: var(--grey-0); svg { fill: var(--grey-0); } > svg { fill: var(--error); } } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/component/toast/style.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/collapse/util/closeAllCollapses.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "closeAllCollapses",
          "parameters": [
            {
              "name": "collapses",
              "type": {
                "text": "NodeListOf<Component>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "closeAllCollapses",
          "declaration": {
            "name": "closeAllCollapses",
            "module": "src/component/collapse/util/closeAllCollapses.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/collapse/util/openAllCollapses.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "openAllCollapses",
          "parameters": [
            {
              "name": "collapses",
              "type": {
                "text": "NodeListOf<Component>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "openAllCollapses",
          "declaration": {
            "name": "openAllCollapses",
            "module": "src/component/collapse/util/openAllCollapses.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/collapse/util/openOnlyOneCollapse.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "openOnlyOneCollapse",
          "parameters": [
            {
              "name": "collapses",
              "type": {
                "text": "NodeListOf<Component>"
              }
            },
            {
              "name": "openId"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "openOnlyOneCollapse",
          "declaration": {
            "name": "openOnlyOneCollapse",
            "module": "src/component/collapse/util/openOnlyOneCollapse.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/collapse/util/resizeCollapses.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "resizeCollapses",
          "parameters": [
            {
              "name": "collapses",
              "type": {
                "text": "NodeListOf<Component>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "resizeCollapses",
          "declaration": {
            "name": "resizeCollapses",
            "module": "src/component/collapse/util/resizeCollapses.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/max.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "max",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "item"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "max",
          "declaration": {
            "name": "max",
            "module": "src/util/formController/validators/max.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/maxLength.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "maxLength",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "item"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "maxLength",
          "declaration": {
            "name": "maxLength",
            "module": "src/util/formController/validators/maxLength.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/min.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "min",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "item"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "min",
          "declaration": {
            "name": "min",
            "module": "src/util/formController/validators/min.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/minLength.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "minLength",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "item"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "minLength",
          "declaration": {
            "name": "minLength",
            "module": "src/util/formController/validators/minLength.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/regex.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "regex",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "item"
            },
            {
              "name": "regex",
              "type": {
                "text": "RegExp"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "regex",
          "declaration": {
            "name": "regex",
            "module": "src/util/formController/validators/regex.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/required.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "required",
          "parameters": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "required",
          "declaration": {
            "name": "required",
            "module": "src/util/formController/validators/required.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/util/formController/validators/secure.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "secure",
          "parameters": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "secure",
          "declaration": {
            "name": "secure",
            "module": "src/util/formController/validators/secure.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/component/toast/util/toastFactory.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "toastFactory"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "toastFactory",
          "declaration": {
            "name": "toastFactory",
            "module": "src/component/toast/util/toastFactory.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/projects/component/project-form/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Component",
          "members": [
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "canDelete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showForm",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "inputFields",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "FormController<Component, IFormValues>"
              },
              "default": "new FormController(this)"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[defaultStyle, buttonsWrapperStyles, style]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "handleFormSubmit"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wf-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Component",
          "declaration": {
            "name": "Component",
            "module": "src/views/projects/component/project-form/index.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wf-project-form",
          "declaration": {
            "name": "Component",
            "module": "src/views/projects/component/project-form/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/views/projects/component/project-form/interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/views/projects/component/project-form/style.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "style",
          "default": "css` :host * { margin-bottom: 16px; } wf-button { margin-bottom: 0; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "style",
          "declaration": {
            "name": "style",
            "module": "src/views/projects/component/project-form/style.ts"
          }
        }
      ]
    }
  ]
}
